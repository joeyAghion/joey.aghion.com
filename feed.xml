<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2013-05-21T16:12:00Z</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Eliminating TextMate Lag</title>
    <link rel="alternate" href="/eliminating-textmate-lag/"/>
    <id>/eliminating-textmate-lag/</id>
    <published>2013-05-21T16:12:00Z</published>
    <updated>2013-05-21T16:12:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <summary type="html">&lt;p&gt;I&amp;#8217;m still using &lt;a href='http://macromates.com/'&gt;TextMate 1&lt;/a&gt;, since 2.0 has been buggy for me. If you&amp;#8217;re in the same boat, you might share my frustration with the recurring lag that TextMate experiences when switching focus between applications. TextMate tries to reload the entire project&amp;#8217;s file state on focus, and this can be noticeably slow.&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;I&amp;#8217;m still using &lt;a href='http://macromates.com/'&gt;TextMate 1&lt;/a&gt;, since 2.0 has been buggy for me. If you&amp;#8217;re in the same boat, you might share my frustration with the recurring lag that TextMate experiences when switching focus between applications. TextMate tries to reload the entire project&amp;#8217;s file state on focus, and this can be noticeably slow.&lt;/p&gt;

&lt;p&gt;These tips have eliminated the problem for me. Feel free to mix and match:&lt;/p&gt;

&lt;h3 id='avoid_loading_the_entire_project_directory'&gt;Avoid loading the entire project directory&lt;/h3&gt;

&lt;p&gt;If you&amp;#8217;re working with a Rails project, you can avoid loading the heavy &lt;code&gt;log/&lt;/code&gt; and &lt;code&gt;tmp/&lt;/code&gt; directories with the &lt;code&gt;mater&lt;/code&gt; alias. Just put this in one of your shell start-up scripts:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;alias mater=&amp;quot;ls | grep -Ev &amp;#39;log|tmp&amp;#39; | xargs mate&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Adjust for other project types.&lt;/p&gt;

&lt;h3 id='disable_project_tree_refresh_with_remate'&gt;Disable project tree refresh with ReMate&lt;/h3&gt;

&lt;p&gt;&lt;a href='http://ciaranwal.sh/remate/'&gt;The ReMate plugin&lt;/a&gt; adds a &lt;em&gt;Disable Refresh on Regaining Focus&lt;/em&gt; item to the &lt;em&gt;Window&lt;/em&gt; menu. Download and extract the plugin, double click to add to TextMate, and relaunch TextMate. Then, check the new menu option to disable the project refresh behavior entirely. (You can always temporarily uncheck it to refresh the project state.)&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>A Search Shortcut for "I'm Feeling Lucky"</title>
    <link rel="alternate" href="/a-search-shortcut-for-i-m-feeling-lucky/"/>
    <id>/a-search-shortcut-for-i-m-feeling-lucky/</id>
    <published>2013-05-01T00:00:00Z</published>
    <updated>2013-05-01T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <summary type="html">&lt;p&gt;I don&amp;#8217;t make an effort to remember URLs, so often I type the name of a site into the Chrome location bar, hit enter, and then immediately click on the first search result to navigate to the site. There&amp;#8217;s at least one unnecessary click in there, so&amp;#8230;&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;I don&amp;#8217;t make an effort to remember URLs, so often I type the name of a site into the Chrome location bar, hit enter, and then immediately click on the first search result to navigate to the site. There&amp;#8217;s at least one unnecessary click in there, so&amp;#8230;&lt;/p&gt;

&lt;p&gt;I created a custom search engine in Chrome for Google&amp;#8217;s &lt;em&gt;I&amp;#8217;m Feeling Lucky&lt;/em&gt; function.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Go to &lt;strong&gt;Settings&lt;/strong&gt;, then &lt;strong&gt;Manage search engines&amp;#8230;&lt;/strong&gt;&lt;/li&gt;

&lt;li&gt;At the bottom of the &lt;strong&gt;Other search engines&lt;/strong&gt; list, add a new entry called &lt;em&gt;I&amp;#8217;m Feeling Lucky&lt;/em&gt;&lt;/li&gt;

&lt;li&gt;For &lt;strong&gt;Keyword&lt;/strong&gt;, choose a convenient shortcut. I chose the single character &lt;em&gt;&amp;gt;&lt;/em&gt;&lt;/li&gt;

&lt;li&gt;For &lt;strong&gt;URL&lt;/strong&gt;, enter: &lt;em&gt;http://www.google.com/search?hl=en&amp;amp;q=%s&amp;amp;btnI=I%27m+Feeling+Lucky&amp;amp;aq=f&amp;amp;oq=&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img alt='Manage search engines screenshot' src='/images/2013-05-01-manage-search-engines.png' /&gt;&lt;/p&gt;

&lt;p&gt;Now, you just need to type &lt;code&gt;&amp;gt;&lt;/code&gt; (or your preferred keyword) and hit &lt;code&gt;Tab&lt;/code&gt; to type a query. When you hit &lt;code&gt;Enter&lt;/code&gt;, you&amp;#8217;ll navigate directly to the first result.&lt;/p&gt;

&lt;p&gt;&lt;img alt='Search Im feeling lucky' src='/images/2013-05-01-search-im-feeling-lucky.png' /&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Building a blog with Middleman and GitHub pages</title>
    <link rel="alternate" href="/building-a-blog-with-middleman-and-github-pages/"/>
    <id>/building-a-blog-with-middleman-and-github-pages/</id>
    <published>2013-04-28T00:00:00Z</published>
    <updated>2013-04-28T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;a href='http://blog.posterous.com/thanks-from-posterous'&gt;Posterous is shutting down&lt;/a&gt;, so I was finally forced to figure out a better blogging solution. Since my &lt;a href='http://artsy.net'&gt;day job&lt;/a&gt; revolves around building and maintaining dynamic sites, that was exactly what I &lt;em&gt;didn&amp;#8217;t&lt;/em&gt; want for my personal site. Enter &lt;a href='http://middlemanapp.com/'&gt;Middleman&lt;/a&gt;, the super-simple &lt;strong&gt;static&lt;/strong&gt; site engine. Best of all, it uses a toolchain that&amp;#8217;s very familiar to Ruby developers.&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;&lt;a href='http://blog.posterous.com/thanks-from-posterous'&gt;Posterous is shutting down&lt;/a&gt;, so I was finally forced to figure out a better blogging solution. Since my &lt;a href='http://artsy.net'&gt;day job&lt;/a&gt; revolves around building and maintaining dynamic sites, that was exactly what I &lt;em&gt;didn&amp;#8217;t&lt;/em&gt; want for my personal site. Enter &lt;a href='http://middlemanapp.com/'&gt;Middleman&lt;/a&gt;, the super-simple &lt;strong&gt;static&lt;/strong&gt; site engine. Best of all, it uses a toolchain that&amp;#8217;s very familiar to Ruby developers.&lt;/p&gt;

&lt;h3 id='getting_started'&gt;Getting Started&lt;/h3&gt;

&lt;p&gt;The &lt;a href='https://github.com/middleman/middleman'&gt;middleman&lt;/a&gt; gem supports static sites of all sorts, but since this site is primarily a blog, I reached straight for the &lt;a href='https://github.com/middleman/middleman-blog'&gt;middleman-blog&lt;/a&gt; extension.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem install middleman-blog
middleman init myblog --template=blog&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This generates the following folder structure:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;myblog
 |- .gitignore
 |- config.rb
 |- Gemfile
 |- Gemfile.lock
 |- source
    |- 2012-01-01-example-article.html.markdown
    |- calendar.html.erb
    |- feed.xml.builder
    |- images
    |- index.html.erb
    |- javascripts
    |- layout.erb
    |- stylesheets
    |- tag.html.erb&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Those files and folders are almost self-explanatory, but to call out a few:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;config.rb&lt;/strong&gt; holds all of middleman&amp;#8217;s configuration, including a block for blog-specific settings.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;source&lt;/strong&gt; holds just that&amp;#8212;the source files. These are later compiled (according to the middleman settings you&amp;#8217;ve chosen) into a &lt;strong&gt;build&lt;/strong&gt; directory that contains the final site&amp;#8217;s files.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;layout.erb&lt;/strong&gt; is the main site layout. ERB is the default, but middleman supports &lt;a href='http://middlemanapp.com/templates/'&gt;many other templating engines&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id='creating_an_article'&gt;Creating an article&lt;/h3&gt;

&lt;p&gt;Actually, there&amp;#8217;s an example article included. But, to create our own:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bundle exec middleman article &amp;quot;Launching my blog&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This creates a new source file at &lt;code&gt;source/2013-04-28-launching-my-blog.html.markdown&lt;/code&gt; with the appropriate YAML-formatted &amp;#8220;frontmatter.&amp;#8221; You can add comma-delimited tags and compose the post in markdown:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
title: Launching my blog
date: 2013-04-28 03:26 UTC
tags: posterous, github pages
---

Buh bye posterous!&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After starting up the development server with &lt;code&gt;bundle exec middleman&lt;/code&gt;, we can open http://localhost:4567 to check our work:&lt;/p&gt;
&lt;img alt='Initial middleman screenshot' src='/images/2013-04-28-middleman-screenshot.png' /&gt;
&lt;p&gt;It&amp;#8217;s unsightly for now, but&amp;#8212;when deployed as static HTML&amp;#8212;it&amp;#8217;s very, very fast.&lt;/p&gt;

&lt;h3 id='deploying'&gt;Deploying&lt;/h3&gt;

&lt;p&gt;To compile the full site&amp;#8217;s static content:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bundle exec middleman build&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that the &lt;code&gt;build&lt;/code&gt; folder containing the compiled site is &lt;em&gt;not&lt;/em&gt; checked in (it&amp;#8217;s listed in the default &lt;code&gt;.gitignore&lt;/code&gt; file).&lt;/p&gt;

&lt;p&gt;At this stage, that folder&amp;#8217;s contents could be hosted just about anywhere. We&amp;#8217;ll deploy our site to &lt;a href='http://pages.github.com/'&gt;github pages&lt;/a&gt; with help from the &lt;a href='https://github.com/neo/middleman-gh-pages'&gt;middleman-gh-pages&lt;/a&gt; gem. First, we add it to the Gemfile:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem &amp;quot;middleman-gh-pages&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And require it in a &lt;code&gt;Rakefile&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require &amp;#39;middleman-gh-pages&amp;#39;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After bundle-installing again, we&amp;#8217;ll have a new &lt;code&gt;publish&lt;/code&gt; rake task that pushes the static site to a special &lt;code&gt;gh-pages&lt;/code&gt; branch on the same remote as the source. (If you haven&amp;#8217;t made a github repo for this project yet, now would be a good time.)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bundle exec rake publish&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This last step is worth explaining. The &amp;#8220;gh-pages&amp;#8221; branch is specially named so that Github will publish its contents to your site at &lt;em&gt;username.github.io/projectname&lt;/em&gt;. It&amp;#8217;s an &amp;#8220;orphan&amp;#8221; branch (meaning it has no parents). I.e., it&amp;#8217;s completely divorced from your master branch&amp;#8217;s content. The master branch contains your source files, and the static files compiled to the &lt;code&gt;build&lt;/code&gt; subdirectory become the root folder&amp;#8217;s content in the &lt;code&gt;gh-pages&lt;/code&gt; branch. Luckily, you don&amp;#8217;t have to manage the &lt;code&gt;gh-pages&lt;/code&gt; branch directly; the &lt;code&gt;publish&lt;/code&gt; task takes care of compiling your site and creating the corresponding commits on &lt;code&gt;gh-pages&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finally, setting up a nice domain for your site is as simple as updating DNS records and adding a &lt;code&gt;CNAME&lt;/code&gt; file to the root of your site (or, in middleman&amp;#8217;s case, the &lt;code&gt;source&lt;/code&gt; directory) with the specified domain. &lt;a href='https://help.github.com/articles/setting-up-a-custom-domain-with-pages'&gt;See github&amp;#8217;s more detailed instructions.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Styling the site is left as an exercise, or feel free to borrow from &lt;a href='http://github.com/joeyAghion/joey.aghion.com'&gt;this site&amp;#8217;s source&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id='more_information'&gt;More information&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Advanced features, community extensions, and more at &lt;a href='http://middlemanapp.com'&gt;the middleman site&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='http://middlemanapp.com/blogging/'&gt;middleman-blog extension&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='http://middlemanapp.com/pretty-urls/'&gt;&amp;#8220;Pretty&amp;#8221; URLs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <title>Unique Tabs - a Chrome extension for staying sane</title>
    <link rel="alternate" href="/unique-tabs/"/>
    <id>/unique-tabs/</id>
    <published>2013-03-08T00:00:00Z</published>
    <updated>2013-03-08T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <summary type="html">&lt;p&gt;The internet is a maze. Sometimes in my travels through this maze, I circle back on a path I&amp;#8217;ve already traveled. When that happens, my browser tabs start to look like this:&lt;/p&gt;
&lt;img src='/images/2013-03-08-tabs.png' /&gt;</summary>
    <content type="html">&lt;p&gt;The internet is a maze. Sometimes in my travels through this maze, I circle back on a path I&amp;#8217;ve already traveled. When that happens, my browser tabs start to look like this:&lt;/p&gt;
&lt;img src='/images/2013-03-08-tabs.png' /&gt;
&lt;p&gt;Some of those tabs are purely redundant. I discovered that Chrome used to include a Labs feature called &amp;#8220;Focus existing tab to open&amp;#8221; that attempted to avoid this, but it seems to have been removed.&lt;/p&gt;

&lt;p&gt;You can now install my solution from the Chrome Web Store:&lt;/p&gt;

&lt;p&gt;&lt;a href='https://chrome.google.com/webstore/detail/unique-tabs/cicbejncjmbkbahiicbiflndmhbcgibk'&gt;Unique Tabs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Upon opening a new tab or navigating to a new page, it closes any earlier, duplicate tabs in the same window. Before closing the tabs, a notification is displayed. Clicking the notification within a brief delay (~5 seconds) prevents the tabs from being closed.&lt;/p&gt;

&lt;p&gt;There are a lot of tab-management extensions available for Chrome, but none accomplished exactly what I wanted:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Close the duplicate tabs automatically and without interrupting the user&lt;/li&gt;

&lt;li&gt;Allow the default action to be canceled on a case-by-case basis&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since installing the extension, it&amp;#8217;s closed dozens of tabs for me and helped preserve my sanity (and RAM). I hope you find it useful!&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Using `git bisect run` with RVM</title>
    <link rel="alternate" href="/using-git-bisect-run-with-rvm/"/>
    <id>/using-git-bisect-run-with-rvm/</id>
    <published>2012-07-24T00:00:00Z</published>
    <updated>2012-07-24T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <summary type="html">&lt;p&gt;If you&amp;#8217;re not familiar with &lt;code&gt;git bisect&lt;/code&gt;, &lt;a href='http://www.kernel.org/pub/software/scm/git/docs/git-bisect.html'&gt;check out the docs&lt;/a&gt;. It&amp;#8217;s an invaluable tool for locating the commit that introduced a failure in your git repository (via binary search). You simply test and mark different code states as &lt;em&gt;good&lt;/em&gt; or &lt;em&gt;bad&lt;/em&gt;, and &lt;code&gt;git bisect&lt;/code&gt; narrows down the offending code.&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;If you&amp;#8217;re not familiar with &lt;code&gt;git bisect&lt;/code&gt;, &lt;a href='http://www.kernel.org/pub/software/scm/git/docs/git-bisect.html'&gt;check out the docs&lt;/a&gt;. It&amp;#8217;s an invaluable tool for locating the commit that introduced a failure in your git repository (via binary search). You simply test and mark different code states as &lt;em&gt;good&lt;/em&gt; or &lt;em&gt;bad&lt;/em&gt;, and &lt;code&gt;git bisect&lt;/code&gt; narrows down the offending code.&lt;/p&gt;

&lt;p&gt;If you can test whether a given commit is good or bad with a single command, it gets even better. The &lt;code&gt;git bisect run&lt;/code&gt; command is autopilot for &lt;code&gt;git bisect&lt;/code&gt;&amp;#8211;just specify the command to test each commit and let it loose:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git bisect run bundle exec rspec spec/models/whoops.rb&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;BUT&lt;/em&gt;, if you use &lt;a href='https://rvm.io/'&gt;RVM&lt;/a&gt; and your environment is anything like mine, you might see errors implying that the command&amp;#8217;s &lt;code&gt;PATH&lt;/code&gt; isn&amp;#8217;t set correctly. The reason is that &lt;code&gt;git bisect&lt;/code&gt; prepends &lt;code&gt;/usr/libexec/git-core:/user/bin&lt;/code&gt; to the &lt;code&gt;PATH&lt;/code&gt; when executing your test command, and this can bypass the executables that RVM prefers. The solution:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git bisect run sh -c &amp;#39;source ~/.rvm/scripts/rvm &amp;amp;&amp;amp; bundle exec rspec spec/models/whoops.rb&amp;#39;&lt;/code&gt;&lt;/pre&gt;</content>
  </entry>
  <entry>
    <title>Reminder: Spend time with your site</title>
    <link rel="alternate" href="/reminder-spend-time-with-your-site/"/>
    <id>/reminder-spend-time-with-your-site/</id>
    <published>2012-07-08T00:00:00Z</published>
    <updated>2012-07-08T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <summary type="html">&lt;p&gt;I&amp;#8217;ve been posting at the &lt;a href='http://artsy.github.com'&gt;Artsy engineering blog&lt;/a&gt;, most recently about how we &lt;a href='http://artsy.github.com/blog/2012/07/05/spend-time-with-your-site'&gt;trick ourselves into sharing end users&amp;#8217; experiences&lt;/a&gt;:&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;I&amp;#8217;ve been posting at the &lt;a href='http://artsy.github.com'&gt;Artsy engineering blog&lt;/a&gt;, most recently about how we &lt;a href='http://artsy.github.com/blog/2012/07/05/spend-time-with-your-site'&gt;trick ourselves into sharing end users&amp;#8217; experiences&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;#8230;we stole a page from the agile development handbook and built an &lt;a href='http://alistair.cockburn.us/Information+radiator'&gt;information radiator&lt;/a&gt;. Like a &lt;a href='http://en.wikipedia.org/wiki/Kanban_board'&gt;kanban board&lt;/a&gt;, news ticker, or &lt;a href='https://demo.geckoboard.com/dashboard/B6782E562794C2F2'&gt;analytics wall board&lt;/a&gt;, our information radiator gives us an ambient awareness of end users&amp;#8217; experiences. How?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It&amp;#8217;s our site, as a slideshow.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;That&amp;#8217;s all. Our wall-mounted display shows the same web page that a visitor to our site recently requested. Every 20 seconds, it refreshes and shows a new, more recently requested page.&lt;/p&gt;

&lt;p&gt;Without much effort, this gives us a sense of where users spend time on the site (&lt;em&gt;nudes seem popular today&lt;/em&gt;). The impact of events such as email blasts or celebrity mentions is immediately apparent (&lt;em&gt;did &lt;a href='https://twitter.com/aplusk'&gt;@aplusk&lt;/a&gt; just tweet us?&lt;/em&gt;). And when problems happen, we notice them as soon as errors pop up on the screen (&lt;em&gt;&lt;a href='http://gigaom.com/cloud/some-of-amazon-web-services-are-down-again'&gt;AWS down again?&lt;/a&gt;&lt;/em&gt;).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Check out the &lt;a href='http://artsy.github.com/blog/2012/07/05/spend-time-with-your-site'&gt;full post&lt;/a&gt;.&lt;/p&gt;</content>
  </entry>
</feed>
