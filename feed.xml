<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2013-04-28T00:00:00Z</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Building a blog with Middleman and GitHub pages</title>
    <link rel="alternate" href="/building-a-blog-with-middleman-and-github-pages/"/>
    <id>/building-a-blog-with-middleman-and-github-pages/</id>
    <published>2013-04-28T00:00:00Z</published>
    <updated>2013-04-28T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;a href='http://blog.posterous.com/thanks-from-posterous'&gt;Posterous is shutting down&lt;/a&gt;, so I was finally forced to figure out a better blogging solution. Since my &lt;a href='http://artsy.net'&gt;day job&lt;/a&gt; revolves around building and maintaining dynamic sites, that was exactly what I &lt;em&gt;didn&amp;#8217;t&lt;/em&gt; want for my personal site. Enter &lt;a href='http://middlemanapp.com/'&gt;Middleman&lt;/a&gt;, the super-simple &lt;strong&gt;static&lt;/strong&gt; site engine. Best of all, it uses a toolchain that&amp;#8217;s very familiar to Ruby developers.&lt;/p&gt;

&lt;h2 id='getting_started'&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;The &lt;a href='https://github.com/middleman/middleman'&gt;middleman&lt;/a&gt; gem supports static sites of all sorts, but since this site is primarily a blog, I reached straight for the &lt;a href='https://github.com/middleman/middleman-blog'&gt;middleman-blog&lt;/a&gt; extension.&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;&lt;a href='http://blog.posterous.com/thanks-from-posterous'&gt;Posterous is shutting down&lt;/a&gt;, so I was finally forced to figure out a better blogging solution. Since my &lt;a href='http://artsy.net'&gt;day job&lt;/a&gt; revolves around building and maintaining dynamic sites, that was exactly what I &lt;em&gt;didn&amp;#8217;t&lt;/em&gt; want for my personal site. Enter &lt;a href='http://middlemanapp.com/'&gt;Middleman&lt;/a&gt;, the super-simple &lt;strong&gt;static&lt;/strong&gt; site engine. Best of all, it uses a toolchain that&amp;#8217;s very familiar to Ruby developers.&lt;/p&gt;

&lt;h2 id='getting_started'&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;The &lt;a href='https://github.com/middleman/middleman'&gt;middleman&lt;/a&gt; gem supports static sites of all sorts, but since this site is primarily a blog, I reached straight for the &lt;a href='https://github.com/middleman/middleman-blog'&gt;middleman-blog&lt;/a&gt; extension.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem install middleman-blog
middleman init myblog --template=blog&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This generates the following folder structure:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;myblog
 |- config.rb
 |- Gemfile
 |- Gemfile.lock
 |- source
    |- 2012-01-01-example-article.html.markdown
    |- calendar.html.erb
    |- feed.xml.builder
    |- images
    |- index.html.erb
    |- javascripts
    |- layout.erb
    |- stylesheets
    |- tag.html.erb&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Those files and folders are almost self-explanatory, but to call out a few:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;config.rb&lt;/strong&gt; holds all of middleman&amp;#8217;s configuration, including a block for blog-specific settings.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;source&lt;/strong&gt; holds just that&amp;#8212;the source files. These are later compiled (according to the middleman settings you&amp;#8217;ve chosen) into a &lt;strong&gt;build&lt;/strong&gt; directory that contains the final site&amp;#8217;s files.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;layout.erb&lt;/strong&gt; is the main site layout. ERB is used by default, but middleman supports &lt;a href='http://middlemanapp.com/templates/'&gt;many other templating engines&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='creating_an_article'&gt;Creating an article&lt;/h2&gt;

&lt;p&gt;Actually, there&amp;#8217;s an example article included. But, to create our own:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bundle exec middleman article &amp;quot;Launching my blog&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This creates a new source file at &lt;code&gt;source/2013-04-28-launching-my-blog.html.markdown&lt;/code&gt; with the appropriate YAML-formatted &amp;#8220;frontmatter.&amp;#8221; You can add comma-delimited tags and compose the post in markdown:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
title: Launching my blog
date: 2013-04-25 03:26 UTC
tags: posterous, github pages
---

Buh bye posterous!&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After starting up the development server with &lt;code&gt;bundle exec middleman&lt;/code&gt;, we can open http://localhost:4567 to check our work:&lt;/p&gt;
&lt;img alt='Initial middleman screenshot' src='/images/2013-04-28-middleman-screenshot.png' /&gt;
&lt;p&gt;It&amp;#8217;s unsightly for now, but&amp;#8212;when deployed as static HTML&amp;#8212;it&amp;#8217;s very, very fast.&lt;/p&gt;

&lt;h2 id='deploying'&gt;Deploying&lt;/h2&gt;

&lt;p&gt;To compile the full site&amp;#8217;s static content:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bundle exec middleman build&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that the destination &lt;code&gt;build&lt;/code&gt; folder is included in the default &lt;code&gt;.gitignore&lt;/code&gt; file. At this stage, that folder&amp;#8217;s contents could be hosted just about anywhere. We&amp;#8217;ll deploy our site to &lt;a href='http://pages.github.com/'&gt;github pages&lt;/a&gt;, and the &lt;a href='https://github.com/neo/middleman-gh-pages'&gt;middleman-gh-pages&lt;/a&gt; gem will help. First, we add it to the Gemfile:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem &amp;quot;middleman-gh-pages&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And require it in a &lt;code&gt;Rakefile&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require &amp;#39;middleman-gh-pages&amp;#39;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After bundle-installing again, we&amp;#8217;ll have a new &lt;code&gt;publish&lt;/code&gt; rake task that pushes the static site to a special &lt;code&gt;gh-pages&lt;/code&gt; branch on the same remote as the source. (If you haven&amp;#8217;t made a github repo for this project yet, now would be a good time.)&lt;/p&gt;

&lt;p&gt;This last step is worth elaborating on. The &amp;#8220;gh-pages&amp;#8221; branch is specially named so that Github will publish the included content to your site at &lt;em&gt;username.github.io/projectname&lt;/em&gt;. It&amp;#8217;s an &amp;#8220;orphan&amp;#8221; branch (meaning it has no parents). I.e., it&amp;#8217;s completely divorced from your master branch&amp;#8217;s content. The master branch contains your source files, and the static files published to the &lt;code&gt;build&lt;/code&gt; subdirectory become (via the &lt;code&gt;publish&lt;/code&gt; rake task) the root folder&amp;#8217;s content in the &lt;code&gt;gh-pages&lt;/code&gt; branch.&lt;/p&gt;

&lt;p&gt;Finally, setting up a nice domain for your site is as simple as updating DNS records and adding a &lt;code&gt;CNAME&lt;/code&gt; file to the root of your site (or, in middleman&amp;#8217;s case, the &lt;code&gt;source&lt;/code&gt; directory) with the specified domain. &lt;a href='https://help.github.com/articles/setting-up-a-custom-domain-with-pages'&gt;See github&amp;#8217;s more detailed instructions.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Styling the site is left as an exercise, or feel free to borrow from &lt;a href='http://github.com/joeyAghion/joey.aghion.com'&gt;this site&amp;#8217;s source&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id='more_information'&gt;More information&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;See the &lt;a href='http://middlemanapp.com/blogging/'&gt;middleman-blog docs&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='http://middlemanapp.com/pretty-urls/'&gt;&amp;#8220;Pretty&amp;#8221; URLs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <title>Unique Tabs - a Chrome extension for staying sane</title>
    <link rel="alternate" href="/unique-tabs/"/>
    <id>/unique-tabs/</id>
    <published>2013-03-08T00:00:00Z</published>
    <updated>2013-03-08T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <summary type="html">&lt;p&gt;The internet is a maze. Sometimes in my travels through this maze, I circle back on a path I&amp;#8217;ve already traveled. When that happens, my browser tabs start to look like this:&lt;/p&gt;
&lt;img src='/images/2013-03-08-tabs.png' /&gt;
&lt;p&gt;Some of those tabs are purely redundant. I discovered that Chrome used to include a Labs feature called &amp;#8220;Focus existing tab to open&amp;#8221; that attempted to avoid this, but it seems to have been removed.&lt;/p&gt;

&lt;p&gt;You can now install my solution from the Chrome Web Store:&lt;/p&gt;

&lt;p&gt;&lt;a href='https://chrome.google.com/webstore/detail/unique-tabs/cicbejncjmbkbahiicbiflndmhbcgibk'&gt;Unique Tabs&lt;/a&gt;&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;The internet is a maze. Sometimes in my travels through this maze, I circle back on a path I&amp;#8217;ve already traveled. When that happens, my browser tabs start to look like this:&lt;/p&gt;
&lt;img src='/images/2013-03-08-tabs.png' /&gt;
&lt;p&gt;Some of those tabs are purely redundant. I discovered that Chrome used to include a Labs feature called &amp;#8220;Focus existing tab to open&amp;#8221; that attempted to avoid this, but it seems to have been removed.&lt;/p&gt;

&lt;p&gt;You can now install my solution from the Chrome Web Store:&lt;/p&gt;

&lt;p&gt;&lt;a href='https://chrome.google.com/webstore/detail/unique-tabs/cicbejncjmbkbahiicbiflndmhbcgibk'&gt;Unique Tabs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Upon opening a new tab or navigating to a new page, it closes any earlier, duplicate tabs in the same window. Before closing the tabs, a notification is displayed. Clicking the notification within a brief delay (~5 seconds) prevents the tabs from being closed.&lt;/p&gt;

&lt;p&gt;There are a lot of tab-management extensions available for Chrome, but none accomplished exactly what I wanted:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Close the duplicate tabs automatically and without interrupting the user&lt;/li&gt;

&lt;li&gt;Allow the default action to be canceled on a case-by-case basis&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since installing the extension, it&amp;#8217;s closed dozens of tabs for me and helped preserve my sanity (and RAM). I hope you find it useful!&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Using `git bisect run` with RVM</title>
    <link rel="alternate" href="/using-git-bisect-run-with-rvm/"/>
    <id>/using-git-bisect-run-with-rvm/</id>
    <published>2012-07-24T00:00:00Z</published>
    <updated>2012-07-24T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <summary type="html">&lt;p&gt;If you&amp;#8217;re not familiar with &lt;code&gt;git bisect&lt;/code&gt;, &lt;a href='http://www.kernel.org/pub/software/scm/git/docs/git-bisect.html'&gt;check out the docs&lt;/a&gt;. It&amp;#8217;s an invaluable tool for locating the commit that introduced a failure in your git repository (via binary search). You simply test and mark different code states as &lt;em&gt;good&lt;/em&gt; or &lt;em&gt;bad&lt;/em&gt;, and &lt;code&gt;git bisect&lt;/code&gt; narrows down the offending code.&lt;/p&gt;

&lt;p&gt;If you can test whether a given commit is good or bad with a single command, it gets even better. The &lt;code&gt;git bisect run&lt;/code&gt; command is autopilot for &lt;code&gt;git bisect&lt;/code&gt;&amp;#8211;just specify the command to test each commit and let it loose:&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;If you&amp;#8217;re not familiar with &lt;code&gt;git bisect&lt;/code&gt;, &lt;a href='http://www.kernel.org/pub/software/scm/git/docs/git-bisect.html'&gt;check out the docs&lt;/a&gt;. It&amp;#8217;s an invaluable tool for locating the commit that introduced a failure in your git repository (via binary search). You simply test and mark different code states as &lt;em&gt;good&lt;/em&gt; or &lt;em&gt;bad&lt;/em&gt;, and &lt;code&gt;git bisect&lt;/code&gt; narrows down the offending code.&lt;/p&gt;

&lt;p&gt;If you can test whether a given commit is good or bad with a single command, it gets even better. The &lt;code&gt;git bisect run&lt;/code&gt; command is autopilot for &lt;code&gt;git bisect&lt;/code&gt;&amp;#8211;just specify the command to test each commit and let it loose:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git bisect run bundle exec rspec spec/models/whoops.rb&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;BUT&lt;/em&gt;, if you use &lt;a href='https://rvm.io/'&gt;RVM&lt;/a&gt; and your environment is anything like mine, you might see errors implying that the command&amp;#8217;s &lt;code&gt;PATH&lt;/code&gt; isn&amp;#8217;t set correctly. The reason is that &lt;code&gt;git bisect&lt;/code&gt; prepends &lt;code&gt;/usr/libexec/git-core:/user/bin&lt;/code&gt; to the &lt;code&gt;PATH&lt;/code&gt; when executing your test command, and this can bypass the executables that RVM prefers. The solution:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git bisect run sh -c &amp;#39;source ~/.rvm/scripts/rvm &amp;amp;&amp;amp; bundle exec rspec spec/models/whoops.rb&amp;#39;&lt;/code&gt;&lt;/pre&gt;</content>
  </entry>
  <entry>
    <title>Reminder: Spend time with your site</title>
    <link rel="alternate" href="/reminder-spend-time-with-your-site/"/>
    <id>/reminder-spend-time-with-your-site/</id>
    <published>2012-07-08T00:00:00Z</published>
    <updated>2012-07-08T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <summary type="html">&lt;p&gt;I&amp;#8217;ve been posting at the &lt;a href='http://artsy.github.com'&gt;Artsy engineering blog&lt;/a&gt;, most recently about how we &lt;a href='http://artsy.github.com/blog/2012/07/05/spend-time-with-your-site'&gt;trick ourselves into sharing end users&amp;#8217; experiences&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;#8230;we stole a page from the agile development handbook and built an &lt;a href='http://alistair.cockburn.us/Information+radiator'&gt;information radiator&lt;/a&gt;. Like a &lt;a href='http://en.wikipedia.org/wiki/Kanban_board'&gt;kanban board&lt;/a&gt;, news ticker, or &lt;a href='https://demo.geckoboard.com/dashboard/B6782E562794C2F2'&gt;analytics wall board&lt;/a&gt;, our information radiator gives us an ambient awareness of end users&amp;#8217; experiences. How?&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    <content type="html">&lt;p&gt;I&amp;#8217;ve been posting at the &lt;a href='http://artsy.github.com'&gt;Artsy engineering blog&lt;/a&gt;, most recently about how we &lt;a href='http://artsy.github.com/blog/2012/07/05/spend-time-with-your-site'&gt;trick ourselves into sharing end users&amp;#8217; experiences&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;#8230;we stole a page from the agile development handbook and built an &lt;a href='http://alistair.cockburn.us/Information+radiator'&gt;information radiator&lt;/a&gt;. Like a &lt;a href='http://en.wikipedia.org/wiki/Kanban_board'&gt;kanban board&lt;/a&gt;, news ticker, or &lt;a href='https://demo.geckoboard.com/dashboard/B6782E562794C2F2'&gt;analytics wall board&lt;/a&gt;, our information radiator gives us an ambient awareness of end users&amp;#8217; experiences. How?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It&amp;#8217;s our site, as a slideshow.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;That&amp;#8217;s all. Our wall-mounted display shows the same web page that a visitor to our site recently requested. Every 20 seconds, it refreshes and shows a new, more recently requested page.&lt;/p&gt;

&lt;p&gt;Without much effort, this gives us a sense of where users spend time on the site (&lt;em&gt;nudes seem popular today&lt;/em&gt;). The impact of events such as email blasts or celebrity mentions is immediately apparent (&lt;em&gt;did &lt;a href='https://twitter.com/aplusk'&gt;@aplusk&lt;/a&gt; just tweet us?&lt;/em&gt;). And when problems happen, we notice them as soon as errors pop up on the screen (&lt;em&gt;&lt;a href='http://gigaom.com/cloud/some-of-amazon-web-services-are-down-again'&gt;AWS down again?&lt;/a&gt;&lt;/em&gt;).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Check out the &lt;a href='http://artsy.github.com/blog/2012/07/05/spend-time-with-your-site'&gt;full post&lt;/a&gt;.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Heroku with a side of EC2</title>
    <link rel="alternate" href="/heroku-with-a-side-of-ec2/"/>
    <id>/heroku-with-a-side-of-ec2/</id>
    <published>2012-02-01T00:00:00Z</published>
    <updated>2012-02-01T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <summary type="html">&lt;p&gt;I &lt;a href='http://artsy.github.com/blog/2012/01/31/beyond-heroku-satellite-delayed-job-workers-on-ec2'&gt;posted&lt;/a&gt; on the &lt;a href='http://artsy.github.com'&gt;Artsy Engineering blog&lt;/a&gt; about supplementing our Heroku web app with EC2-hosted Delayed Job workers:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Artsy engineers are big users and abusers of Heroku. It&amp;#8217;s a neat abstraction of server resources, so we were conflicted when parts of our application started to bump into Heroku&amp;#8217;s limitations. While we weren&amp;#8217;t eager to start managing additional infrastructure, we found that&amp;#8211;with a few good tools&amp;#8211;we could migrate some components away from Heroku without fragmenting the codebase or over-complicating our development environments.&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    <content type="html">&lt;p&gt;I &lt;a href='http://artsy.github.com/blog/2012/01/31/beyond-heroku-satellite-delayed-job-workers-on-ec2'&gt;posted&lt;/a&gt; on the &lt;a href='http://artsy.github.com'&gt;Artsy Engineering blog&lt;/a&gt; about supplementing our Heroku web app with EC2-hosted Delayed Job workers:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Artsy engineers are big users and abusers of Heroku. It&amp;#8217;s a neat abstraction of server resources, so we were conflicted when parts of our application started to bump into Heroku&amp;#8217;s limitations. While we weren&amp;#8217;t eager to start managing additional infrastructure, we found that&amp;#8211;with a few good tools&amp;#8211;we could migrate some components away from Heroku without fragmenting the codebase or over-complicating our development environments.&lt;/p&gt;

&lt;p&gt;There are a number of reasons your app might need to go beyond Heroku. It might rely on a locally installed tool (not possible on Heroku&amp;#8217;s locked-down servers), or require heavy file-system usage (limited to tmp/ and log/, and not permanent or shared). In our case, the culprit was Heroku&amp;#8217;s 512 MB RAM limit&amp;#8211;reasonable for most web processes, but quickly exceeded by the image-processing tasks of our delayed_job workers. We considered building a specialized image-processing service, but decided instead to supplement our web apps with a custom EC2 instance dedicated to processing background tasks. We call these servers &amp;#8220;satellites.&amp;#8221;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We use &lt;a href='http://www.opscode.com/chef'&gt;Chef&lt;/a&gt; and &lt;a href='http://fog.io'&gt;Fog&lt;/a&gt; to simplify the servers&amp;#8217; administration. Take a look at &lt;a href='https://github.com/joeyAghion/satellite_setup'&gt;the source&lt;/a&gt;, and see &lt;a href='http://artsy.github.com/blog/2012/01/31/beyond-heroku-satellite-delayed-job-workers-on-ec2'&gt;the original post&lt;/a&gt; for all the gory details. Feedback welcome!&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Bash aliases and helpers</title>
    <link rel="alternate" href="/bash-aliases-and-helpers/"/>
    <id>/bash-aliases-and-helpers/</id>
    <published>2012-01-12T07:43:00Z</published>
    <updated>2012-01-12T07:43:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <summary type="html">&lt;p&gt;My ~/.bash_profile file contains these helpers and aliases.&lt;/p&gt;
&lt;!-- from https://gist.github.com/joeyAghion/1371971 --&gt;
&lt;pre&gt;&lt;code&gt;# Display current git branch, nicely colored, in the prompt (with a * if there are changes)
function parse_git_dirty {
  [[ $(git status 2&amp;gt; /dev/null | tail -n1) != &amp;quot;nothing to commit (working directory clean)&amp;quot; ]] &amp;amp;&amp;amp; echo &amp;quot;*&amp;quot;
}
function parse_git_branch {
  git branch --no-color 2&amp;gt; /dev/null | sed -e &amp;#39;/^[^*]/d&amp;#39; -e &amp;quot;s/* \(.*\)/[\1$(parse_git_dirty)]/&amp;quot;
}&lt;/code&gt;&lt;/pre&gt;</summary>
    <content type="html">&lt;p&gt;My ~/.bash_profile file contains these helpers and aliases.&lt;/p&gt;
&lt;!-- from https://gist.github.com/joeyAghion/1371971 --&gt;
&lt;pre&gt;&lt;code&gt;# Display current git branch, nicely colored, in the prompt (with a * if there are changes)
function parse_git_dirty {
  [[ $(git status 2&amp;gt; /dev/null | tail -n1) != &amp;quot;nothing to commit (working directory clean)&amp;quot; ]] &amp;amp;&amp;amp; echo &amp;quot;*&amp;quot;
}
function parse_git_branch {
  git branch --no-color 2&amp;gt; /dev/null | sed -e &amp;#39;/^[^*]/d&amp;#39; -e &amp;quot;s/* \(.*\)/[\1$(parse_git_dirty)]/&amp;quot;
}
export PS1=&amp;#39;\u:\[\033[31;40m\]\w\[\033[0;33m\]$(parse_git_branch)\[\e[0m\]$ &amp;#39;

export EDITOR=&amp;#39;mate -w&amp;#39;

export PATH=$PATH:/usr/local/rvm/bin:~/bin
 [[ -s &amp;quot;$HOME/.rvm/scripts/rvm&amp;quot; ]] &amp;amp;&amp;amp; . &amp;quot;$HOME/.rvm/scripts/rvm&amp;quot;

# colorize terminal
export CLICOLOR=1
export LSCOLORS=GxFxCxDxBxegedabagaced

# Find running processes, e.g.:
#   $ psx chrome
alias psx=&amp;#39;ps aux | grep $1&amp;#39;


# Recursive full text search, e.g.:
#   $ g somestring app/
alias g=&amp;#39;grep -rn&amp;#39;
export GREP_OPTIONS=&amp;#39;--color=auto&amp;#39;

# Output my current IP address (thanks @hmason), e.g.:
#   $ whatsmyip
alias whatsmyip=&amp;#39;curl http://automation.whatismyip.com/n09230945.asp&amp;#39;


# Open man pages in Preview (thanks @brynary), e.g.:
#   $ pman grep
pman () {
    man -t &amp;quot;${1}&amp;quot; | open -f -a /Applications/Preview.app
}

# Who hosts that site (thanks @jcn), e.g.:
#   $ whohosts foursquare.com
whohosts () {
  whois `/opt/local/lib/mysql5/bin/resolveip -s $*`;
}

# exclude tmp/ and log/ when opening a rails project in textmate
alias mater=&amp;quot;ls | grep -Ev &amp;#39;log|tmp&amp;#39; | xargs mate&amp;quot;

# via @desandro http://desandro.github.com/dropshado.ws/
alias glog=&amp;quot;git log --format=&amp;#39;%Cgreen%h%Creset %C(cyan)%an%Creset - %s&amp;#39; --graph&amp;quot;&lt;/code&gt;&lt;/pre&gt;</content>
  </entry>
</feed>
