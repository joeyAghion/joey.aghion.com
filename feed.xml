<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Half a Mind - Joey Aghion</title>
  <id>http://joey.aghion.com</id>
  <link href="http://joey.aghion.com"/>
  <link href="http://joey.aghion.com/feed.xml" rel="self"/>
  <updated>2013-09-13T04:53:00Z</updated>
  <author>
    <name>Joey Aghion</name>
  </author>
  <entry>
    <title>Artsy's experiment with AWS OpsWorks</title>
    <link rel="alternate" href="/artsy-s-experiment-with-aws-opsworks/"/>
    <id>/artsy-s-experiment-with-aws-opsworks/</id>
    <published>2013-09-13T04:53:00Z</published>
    <updated>2013-09-13T04:53:00Z</updated>
    <author>
      <name>Joey Aghion</name>
    </author>
    <summary type="html">&lt;p&gt;After struggling to make Artsy&amp;#8217;s largest application work within &lt;a href='https://www.heroku.com/'&gt;Heroku&amp;#8217;s&lt;/a&gt; platform for a long while, I began a series of experiments with other providers. Recently, those experiments culminated in switching our application to &lt;a href='http://aws.amazon.com/opsworks/'&gt;AWS OpsWorks&lt;/a&gt;.&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;After struggling to make Artsy&amp;#8217;s largest application work within &lt;a href='https://www.heroku.com/'&gt;Heroku&amp;#8217;s&lt;/a&gt; platform for a long while, I began a series of experiments with other providers. Recently, those experiments culminated in switching our application to &lt;a href='http://aws.amazon.com/opsworks/'&gt;AWS OpsWorks&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;OpsWorks offered us much more control, but balanced that with good automation and plenty of sane defaults. To help others up the learning curve I wrote an &lt;a href='http://artsy.github.io/blog/2013/08/27/introduction-to-aws-opsworks/'&gt;Introduction to AWS OpsWorks&lt;/a&gt; for the Artsy engineering blog.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;OpsWorks is a new service from Amazon that promises to provide high-level tools to manage your EC2-based deployment&amp;#8230;. If you&amp;#8217;ve been straining at the limits of your Platform as a Service (PaaS) provider, or just wishing for more automation for your EC2 deployment, you may want to try it out too.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href='http://artsy.github.io/blog/2013/08/27/introduction-to-aws-opsworks/'&gt;Continue reading&lt;/a&gt; or visit the &lt;a href='https://news.ycombinator.com/item?id=6297992'&gt;Hacker News comments&lt;/a&gt;.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Listing MongoDB collections by size</title>
    <link rel="alternate" href="/listing-mongodb-collections-by-size/"/>
    <id>/listing-mongodb-collections-by-size/</id>
    <published>2013-09-10T15:37:00Z</published>
    <updated>2013-09-10T15:37:00Z</updated>
    <author>
      <name>Joey Aghion</name>
    </author>
    <summary type="html">&lt;p&gt;In a MongoDB shell, the &lt;code&gt;db.stats()&lt;/code&gt; command shows you the amount of space occupied by the selected database.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; db.stats()
{
  &amp;quot;db&amp;quot; : &amp;quot;my-db&amp;quot;,
  &amp;quot;collections&amp;quot; : 242,
  &amp;quot;dataSize&amp;quot; : 7167367172,&lt;/code&gt;&lt;/pre&gt;</summary>
    <content type="html">&lt;p&gt;In a MongoDB shell, the &lt;code&gt;db.stats()&lt;/code&gt; command shows you the amount of space occupied by the selected database.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; db.stats()
{
  &amp;quot;db&amp;quot; : &amp;quot;my-db&amp;quot;,
  &amp;quot;collections&amp;quot; : 242,
  &amp;quot;dataSize&amp;quot; : 7167367172,
  &amp;quot;storageSize&amp;quot; : 7885074432,
   ...
  &amp;quot;fileSize&amp;quot; : 14958985216,
  &amp;quot;nsSizeMB&amp;quot; : 16,
  &amp;quot;ok&amp;quot; : 1
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;db.collection_name.stats()&lt;/code&gt; command returns similar metrics for an individual collection, but there&amp;#8217;s no convenient way to see how the overall metrics are broken down by collection.&lt;/p&gt;

&lt;h3 id='my_solution'&gt;My Solution&lt;/h3&gt;

&lt;p&gt;This javascript lists collections in descending order of size and can be executed directly in the mongo shell:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var collectionNames = db.getCollectionNames(), stats = [];
collectionNames.forEach(function (n) { stats.push(db[n].stats()); });
stats = stats.sort(function(a, b) { return b[&amp;#39;size&amp;#39;] - a[&amp;#39;size&amp;#39;]; });
for (var c in stats) { print(stats[c][&amp;#39;ns&amp;#39;] + &amp;quot;: &amp;quot; + stats[c][&amp;#39;size&amp;#39;] + &amp;quot; (&amp;quot; + stats[c][&amp;#39;storageSize&amp;#39;] + &amp;quot;)&amp;quot;); }&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or, see the gist: &lt;a href='https://gist.github.com/joeyAghion/6511184'&gt;mongodb_collection_sizes.js&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Example output (first metric is &lt;code&gt;size&lt;/code&gt;, second is &lt;code&gt;storageSize&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my-db.foos: 5568196496 (7455608832)
my-db.bars: 716999376 (929259520)
...
my-db.bazs: 0 (8192)&lt;/code&gt;&lt;/pre&gt;</content>
  </entry>
  <entry>
    <title>Simple 301 redirects</title>
    <link rel="alternate" href="/simple-301-redirects/"/>
    <id>/simple-301-redirects/</id>
    <published>2013-07-12T14:08:00Z</published>
    <updated>2013-07-12T14:08:00Z</updated>
    <author>
      <name>Joey Aghion</name>
    </author>
    <summary type="html">&lt;p&gt;When I switched from &lt;a href='http://halfamind.aghion.com'&gt;halfamind.aghion.com&lt;/a&gt; to the more personal &lt;a href='http://joey.aghion.com'&gt;joey.aghion.com&lt;/a&gt; for this site, I needed a way to permanently redirect all requests for the old hostname to the new one. &lt;a href='http://pages.github.com'&gt;Github pages&lt;/a&gt; (where this is hosted) only supports a single hostname and doesn&amp;#8217;t allow for redirects. You could redirect &lt;a href='http://stackoverflow.com/questions/9276817/301-redirect-for-site-hosted-at-github'&gt;in javascript&lt;/a&gt; or with a meta-tag, but I wanted to guarantee that search engines would respect the new location.&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;When I switched from &lt;a href='http://halfamind.aghion.com'&gt;halfamind.aghion.com&lt;/a&gt; to the more personal &lt;a href='http://joey.aghion.com'&gt;joey.aghion.com&lt;/a&gt; for this site, I needed a way to permanently redirect all requests for the old hostname to the new one. &lt;a href='http://pages.github.com'&gt;Github pages&lt;/a&gt; (where this is hosted) only supports a single hostname and doesn&amp;#8217;t allow for redirects. You could redirect &lt;a href='http://stackoverflow.com/questions/9276817/301-redirect-for-site-hosted-at-github'&gt;in javascript&lt;/a&gt; or with a meta-tag, but I wanted to guarantee that search engines would respect the new location.&lt;/p&gt;

&lt;p&gt;&lt;a href='http://github.com/joeyAghion/rerouter'&gt;Rerouter&lt;/a&gt; is a simple rack app that accepts a map of source and destination hostnames. When it receives a request matching a source hostname, it issues a 301 (permanent) redirect to the new hostname while preserving the requested path and querystring.&lt;/p&gt;

&lt;p&gt;The complete source is incredibly simple.&lt;/p&gt;

&lt;h3 id='configru'&gt;config.ru&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;require &amp;#39;rack/rewrite&amp;#39;

# Expects ENV[&amp;#39;REDIRECTS&amp;#39;] to be a ruby hash of source =&amp;gt; destination hostnames. E.g.:
#   &amp;quot;{&amp;#39;old.domain.com&amp;#39; =&amp;gt; &amp;#39;new.domain.com&amp;#39;}&amp;quot;
REDIRECTS = eval(ENV[&amp;#39;REDIRECTS&amp;#39;] || &amp;#39;&amp;#39;) || {}

use Rack::Rewrite do

  REDIRECTS.each do |from, to|
    r301 %r{.*}, &amp;quot;http://#{to}$&amp;amp;&amp;quot;, if: -&amp;gt; (env) { env[&amp;#39;SERVER_NAME&amp;#39;] == from }
  end

end

# Fall back to default app (empty).
run -&amp;gt; (env) { [200, {}, []] }&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id='steps_for_setting_up_your_own_rerouter_on_heroku'&gt;Steps for setting up your own rerouter on Heroku:&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/joeyAghion/rerouter.git
cd rerouter
gem install heroku
heroku apps:create
git push heroku master
heroku config:set REDIRECTS=&amp;quot;{&amp;#39;old.domain.com&amp;#39;=&amp;gt;&amp;#39;new.domain.com&amp;#39;}&amp;quot;
heroku domains:add old.domain.com&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, update the DNS of &lt;code&gt;old.domain.com&lt;/code&gt; to be a CNAME pointing to the new heroku app.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Eliminating TextMate Lag</title>
    <link rel="alternate" href="/eliminating-textmate-lag/"/>
    <id>/eliminating-textmate-lag/</id>
    <published>2013-05-21T16:12:00Z</published>
    <updated>2013-05-21T16:12:00Z</updated>
    <author>
      <name>Joey Aghion</name>
    </author>
    <summary type="html">&lt;p&gt;I&amp;#8217;m still using &lt;a href='http://macromates.com/'&gt;TextMate 1&lt;/a&gt;, since 2.0 has been buggy for me. If you&amp;#8217;re in the same boat, you might share my frustration with the recurring lag that TextMate experiences when switching focus between applications. TextMate tries to reload the entire project&amp;#8217;s file state on focus, and this can be noticeably slow.&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;I&amp;#8217;m still using &lt;a href='http://macromates.com/'&gt;TextMate 1&lt;/a&gt;, since 2.0 has been buggy for me. If you&amp;#8217;re in the same boat, you might share my frustration with the recurring lag that TextMate experiences when switching focus between applications. TextMate tries to reload the entire project&amp;#8217;s file state on focus, and this can be noticeably slow.&lt;/p&gt;

&lt;p&gt;These tips have eliminated the problem for me. Feel free to mix and match:&lt;/p&gt;

&lt;h3 id='avoid_loading_the_entire_project_directory'&gt;Avoid loading the entire project directory&lt;/h3&gt;

&lt;p&gt;If you&amp;#8217;re working with a Rails project, you can avoid loading the heavy &lt;code&gt;log/&lt;/code&gt; and &lt;code&gt;tmp/&lt;/code&gt; directories with the &lt;code&gt;mater&lt;/code&gt; alias. Just put this in one of your shell start-up scripts:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;alias mater=&amp;quot;ls | grep -Ev &amp;#39;log|tmp&amp;#39; | xargs mate&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Adjust for other project types.&lt;/p&gt;

&lt;h3 id='disable_project_tree_refresh_with_remate'&gt;Disable project tree refresh with ReMate&lt;/h3&gt;

&lt;p&gt;&lt;a href='http://ciaranwal.sh/remate/'&gt;The ReMate plugin&lt;/a&gt; adds a &lt;em&gt;Disable Refresh on Regaining Focus&lt;/em&gt; item to the &lt;em&gt;Window&lt;/em&gt; menu. Download and extract the plugin, double click to add to TextMate, and relaunch TextMate. Then, check the new menu option to disable the project refresh behavior entirely. (You can always temporarily uncheck it to refresh the project state.)&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>A Search Shortcut for "I'm Feeling Lucky"</title>
    <link rel="alternate" href="/a-search-shortcut-for-i-m-feeling-lucky/"/>
    <id>/a-search-shortcut-for-i-m-feeling-lucky/</id>
    <published>2013-05-01T00:00:00Z</published>
    <updated>2013-05-01T00:00:00Z</updated>
    <author>
      <name>Joey Aghion</name>
    </author>
    <summary type="html">&lt;p&gt;I don&amp;#8217;t make an effort to remember URLs, so often I type the name of a site into the Chrome location bar, hit enter, and then immediately click on the first search result to navigate to the site. There&amp;#8217;s at least one unnecessary click in there, so&amp;#8230;&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;I don&amp;#8217;t make an effort to remember URLs, so often I type the name of a site into the Chrome location bar, hit enter, and then immediately click on the first search result to navigate to the site. There&amp;#8217;s at least one unnecessary click in there, so&amp;#8230;&lt;/p&gt;

&lt;p&gt;I created a custom search engine in Chrome for Google&amp;#8217;s &lt;em&gt;I&amp;#8217;m Feeling Lucky&lt;/em&gt; function.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Go to &lt;strong&gt;Settings&lt;/strong&gt;, then &lt;strong&gt;Manage search engines&amp;#8230;&lt;/strong&gt;&lt;/li&gt;

&lt;li&gt;At the bottom of the &lt;strong&gt;Other search engines&lt;/strong&gt; list, add a new entry called &lt;em&gt;I&amp;#8217;m Feeling Lucky&lt;/em&gt;&lt;/li&gt;

&lt;li&gt;For &lt;strong&gt;Keyword&lt;/strong&gt;, choose a convenient shortcut. I chose the single character &lt;em&gt;&amp;gt;&lt;/em&gt;&lt;/li&gt;

&lt;li&gt;For &lt;strong&gt;URL&lt;/strong&gt;, enter: &lt;em&gt;http://www.google.com/search?hl=en&amp;amp;q=%s&amp;amp;btnI=I%27m+Feeling+Lucky&amp;amp;aq=f&amp;amp;oq=&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img alt='Manage search engines screenshot' src='/images/2013-05-01-manage-search-engines.png' /&gt;&lt;/p&gt;

&lt;p&gt;Now, you just need to type &lt;code&gt;&amp;gt;&lt;/code&gt; (or your preferred keyword) and hit &lt;code&gt;Tab&lt;/code&gt; to type a query. When you hit &lt;code&gt;Enter&lt;/code&gt;, you&amp;#8217;ll navigate directly to the first result.&lt;/p&gt;

&lt;p&gt;&lt;img alt='Search Im feeling lucky' src='/images/2013-05-01-search-im-feeling-lucky.png' /&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Building a blog with Middleman and GitHub pages</title>
    <link rel="alternate" href="/building-a-blog-with-middleman-and-github-pages/"/>
    <id>/building-a-blog-with-middleman-and-github-pages/</id>
    <published>2013-04-28T00:00:00Z</published>
    <updated>2013-04-28T00:00:00Z</updated>
    <author>
      <name>Joey Aghion</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;a href='http://blog.posterous.com/thanks-from-posterous'&gt;Posterous is shutting down&lt;/a&gt;, so I was finally forced to figure out a better blogging solution. Since my &lt;a href='http://artsy.net'&gt;day job&lt;/a&gt; revolves around building and maintaining dynamic sites, that was exactly what I &lt;em&gt;didn&amp;#8217;t&lt;/em&gt; want for my personal site. Enter &lt;a href='http://middlemanapp.com/'&gt;Middleman&lt;/a&gt;, the super-simple &lt;strong&gt;static&lt;/strong&gt; site engine. Best of all, it uses a toolchain that&amp;#8217;s very familiar to Ruby developers.&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;&lt;a href='http://blog.posterous.com/thanks-from-posterous'&gt;Posterous is shutting down&lt;/a&gt;, so I was finally forced to figure out a better blogging solution. Since my &lt;a href='http://artsy.net'&gt;day job&lt;/a&gt; revolves around building and maintaining dynamic sites, that was exactly what I &lt;em&gt;didn&amp;#8217;t&lt;/em&gt; want for my personal site. Enter &lt;a href='http://middlemanapp.com/'&gt;Middleman&lt;/a&gt;, the super-simple &lt;strong&gt;static&lt;/strong&gt; site engine. Best of all, it uses a toolchain that&amp;#8217;s very familiar to Ruby developers.&lt;/p&gt;

&lt;h3 id='getting_started'&gt;Getting Started&lt;/h3&gt;

&lt;p&gt;The &lt;a href='https://github.com/middleman/middleman'&gt;middleman&lt;/a&gt; gem supports static sites of all sorts, but since this site is primarily a blog, I reached straight for the &lt;a href='https://github.com/middleman/middleman-blog'&gt;middleman-blog&lt;/a&gt; extension.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem install middleman-blog
middleman init myblog --template=blog&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This generates the following folder structure:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;myblog
 |- .gitignore
 |- config.rb
 |- Gemfile
 |- Gemfile.lock
 |- source
    |- 2012-01-01-example-article.html.markdown
    |- calendar.html.erb
    |- feed.xml.builder
    |- images
    |- index.html.erb
    |- javascripts
    |- layout.erb
    |- stylesheets
    |- tag.html.erb&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Those files and folders are almost self-explanatory, but to call out a few:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;config.rb&lt;/strong&gt; holds all of middleman&amp;#8217;s configuration, including a block for blog-specific settings.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;source&lt;/strong&gt; holds just that&amp;#8212;the source files. These are later compiled (according to the middleman settings you&amp;#8217;ve chosen) into a &lt;strong&gt;build&lt;/strong&gt; directory that contains the final site&amp;#8217;s files.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;layout.erb&lt;/strong&gt; is the main site layout. ERB is the default, but middleman supports &lt;a href='http://middlemanapp.com/templates/'&gt;many other templating engines&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id='creating_an_article'&gt;Creating an article&lt;/h3&gt;

&lt;p&gt;Actually, there&amp;#8217;s an example article included. But, to create our own:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bundle exec middleman article &amp;quot;Launching my blog&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This creates a new source file at &lt;code&gt;source/2013-04-28-launching-my-blog.html.markdown&lt;/code&gt; with the appropriate YAML-formatted &amp;#8220;frontmatter.&amp;#8221; You can add comma-delimited tags and compose the post in markdown:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
title: Launching my blog
date: 2013-04-28 03:26 UTC
tags: posterous, github pages
---

Buh bye posterous!&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After starting up the development server with &lt;code&gt;bundle exec middleman&lt;/code&gt;, we can open http://localhost:4567 to check our work:&lt;/p&gt;
&lt;img alt='Initial middleman screenshot' src='/images/2013-04-28-middleman-screenshot.png' /&gt;
&lt;p&gt;It&amp;#8217;s unsightly for now, but&amp;#8212;when deployed as static HTML&amp;#8212;it&amp;#8217;s very, very fast.&lt;/p&gt;

&lt;h3 id='deploying'&gt;Deploying&lt;/h3&gt;

&lt;p&gt;To compile the full site&amp;#8217;s static content:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bundle exec middleman build&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that the &lt;code&gt;build&lt;/code&gt; folder containing the compiled site is &lt;em&gt;not&lt;/em&gt; checked in (it&amp;#8217;s listed in the default &lt;code&gt;.gitignore&lt;/code&gt; file).&lt;/p&gt;

&lt;p&gt;At this stage, that folder&amp;#8217;s contents could be hosted just about anywhere. We&amp;#8217;ll deploy our site to &lt;a href='http://pages.github.com/'&gt;github pages&lt;/a&gt; with help from the &lt;a href='https://github.com/neo/middleman-gh-pages'&gt;middleman-gh-pages&lt;/a&gt; gem. First, we add it to the Gemfile:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem &amp;quot;middleman-gh-pages&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And require it in a &lt;code&gt;Rakefile&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require &amp;#39;middleman-gh-pages&amp;#39;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After bundle-installing again, we&amp;#8217;ll have a new &lt;code&gt;publish&lt;/code&gt; rake task that pushes the static site to a special &lt;code&gt;gh-pages&lt;/code&gt; branch on the same remote as the source. (If you haven&amp;#8217;t made a github repo for this project yet, now would be a good time.)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bundle exec rake publish&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This last step is worth explaining. The &amp;#8220;gh-pages&amp;#8221; branch is specially named so that Github will publish its contents to your site at &lt;em&gt;username.github.io/projectname&lt;/em&gt;. It&amp;#8217;s an &amp;#8220;orphan&amp;#8221; branch (meaning it has no parents). I.e., it&amp;#8217;s completely divorced from your master branch&amp;#8217;s content. The master branch contains your source files, and the static files compiled to the &lt;code&gt;build&lt;/code&gt; subdirectory become the root folder&amp;#8217;s content in the &lt;code&gt;gh-pages&lt;/code&gt; branch. Luckily, you don&amp;#8217;t have to manage the &lt;code&gt;gh-pages&lt;/code&gt; branch directly; the &lt;code&gt;publish&lt;/code&gt; task takes care of compiling your site and creating the corresponding commits on &lt;code&gt;gh-pages&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finally, setting up a nice domain for your site is as simple as updating DNS records and adding a &lt;code&gt;CNAME&lt;/code&gt; file to the root of your site (or, in middleman&amp;#8217;s case, the &lt;code&gt;source&lt;/code&gt; directory) with the specified domain. &lt;a href='https://help.github.com/articles/setting-up-a-custom-domain-with-pages'&gt;See github&amp;#8217;s more detailed instructions.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Styling the site is left as an exercise, or feel free to borrow from &lt;a href='http://github.com/joeyAghion/joey.aghion.com'&gt;this site&amp;#8217;s source&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id='more_information'&gt;More information&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Advanced features, community extensions, and more at &lt;a href='http://middlemanapp.com'&gt;the middleman site&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='http://middlemanapp.com/blogging/'&gt;middleman-blog extension&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='http://middlemanapp.com/pretty-urls/'&gt;&amp;#8220;Pretty&amp;#8221; URLs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
</feed>
