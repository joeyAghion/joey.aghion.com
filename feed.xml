<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Half a Mind - Joey Aghion</title>
  <id>http://joey.aghion.com</id>
  <link href="http://joey.aghion.com"/>
  <link href="http://joey.aghion.com/feed.xml" rel="self"/>
  <updated>2019-05-10T15:34:00Z</updated>
  <author>
    <name>Joey Aghion</name>
  </author>
  <entry>
    <title>Why Projects Need Code Names</title>
    <link rel="alternate" href="/why-projects-need-code-names/"/>
    <id>/why-projects-need-code-names/</id>
    <published>2019-05-10T15:34:00Z</published>
    <updated>2019-05-10T15:34:00Z</updated>
    <author>
      <name>Joey Aghion</name>
    </author>
    <summary type="html">&lt;p&gt;I recently posted to the Artsy engineering blog about &lt;a href='https://artsy.github.io/blog/2019/05/10/why-projects-need-codenames/'&gt;why projects need code names&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;At Artsy, our systems have peculiar code names like Gravity, Pulse, and Vortex. There&amp;#8217;s a persistent learning curve as you contribute to different repositories or as new services get created. Numerous times, I&amp;#8217;ve wondered: are code names worth the trouble?&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    <content type="html">&lt;p&gt;I recently posted to the Artsy engineering blog about &lt;a href='https://artsy.github.io/blog/2019/05/10/why-projects-need-codenames/'&gt;why projects need code names&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;At Artsy, our systems have peculiar code names like Gravity, Pulse, and Vortex. There&amp;#8217;s a persistent learning curve as you contribute to different repositories or as new services get created. Numerous times, I&amp;#8217;ve wondered: are code names worth the trouble?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It took me a while to be convinced of code names&amp;#8217; value, and I even propose some rules for your own project naming scheme:&lt;/p&gt;

&lt;p&gt;&lt;a href='https://artsy.github.io/blog/2019/05/10/why-projects-need-codenames/'&gt;https://artsy.github.io/blog/2019/05/10/why-projects-need-codenames/&lt;/a&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Ruby dependencies</title>
    <link rel="alternate" href="/ruby-dependencies/"/>
    <id>/ruby-dependencies/</id>
    <published>2016-02-09T15:34:00Z</published>
    <updated>2016-02-09T15:34:00Z</updated>
    <author>
      <name>Joey Aghion</name>
    </author>
    <summary type="html">&lt;p&gt;Mike Perham published an excellent rant pleading with developers (and especially developers of Ruby gems) to &lt;a href='http://www.mikeperham.com/2016/02/09/kill-your-dependencies/'&gt;Kill Your Dependencies&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is a common enough idea (see &lt;a href='http://www.fngtps.com/2013/a-quick-note-on-minimal-dependencies-in-ruby-on-rails/'&gt;A quick note on dependencies in Ruby on Rails projects&lt;/a&gt;), and anyone responsible for maintaining a large, complex, or elderly codebase has probably arrived at the conclusion independently. Still, a reminder is in order. I&amp;#8217;ve certainly been guilty myself of leaning a little &lt;em&gt;too&lt;/em&gt; heavily on the casual contributions of others.&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Mike Perham published an excellent rant pleading with developers (and especially developers of Ruby gems) to &lt;a href='http://www.mikeperham.com/2016/02/09/kill-your-dependencies/'&gt;Kill Your Dependencies&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is a common enough idea (see &lt;a href='http://www.fngtps.com/2013/a-quick-note-on-minimal-dependencies-in-ruby-on-rails/'&gt;A quick note on dependencies in Ruby on Rails projects&lt;/a&gt;), and anyone responsible for maintaining a large, complex, or elderly codebase has probably arrived at the conclusion independently. Still, a reminder is in order. I&amp;#8217;ve certainly been guilty myself of leaning a little &lt;em&gt;too&lt;/em&gt; heavily on the casual contributions of others.&lt;/p&gt;

&lt;p&gt;To his excellent list, I&amp;#8217;ll add a few practices that we&amp;#8217;ve started applying at &lt;a href='https://www.artsy.net'&gt;Artsy&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Each addition to your Gemfile should include a comment explaining the choice.&lt;/strong&gt; Instead of the Gemfile being a simple list, think of it as a table with 3 columns: gem name, &lt;span&gt;optional&lt;/span&gt; version constraint, and &lt;em&gt;justification&lt;/em&gt;. A sample from one of our recent projects:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem &amp;#39;unicorn&amp;#39;  # avoid timeouts on single web process
gem &amp;#39;stringex&amp;#39;  # clean up extended characters in email names
gem &amp;#39;newrelic_rpm&amp;#39;  # track errors, transactions
gem &amp;#39;gridhook&amp;#39;  # handle sendgrid event notifications&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Avoid adding gems that monkeypatch external code or behave differently based on what other dependencies have been loaded.&lt;/strong&gt; And especially, avoid &lt;em&gt;writing&lt;/em&gt; such gems. When some enterprising developer tries to trace the dependencies&amp;#8217; usage years later in the hope of removing or replacing them, full-text searches won&amp;#8217;t reveal a thing. Stay within your namespace if at all possible.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Future Fridays</title>
    <link rel="alternate" href="/future-fridays/"/>
    <id>/future-fridays/</id>
    <published>2016-01-04T15:12:00Z</published>
    <updated>2016-01-04T15:12:00Z</updated>
    <author>
      <name>Joey Aghion</name>
    </author>
    <summary type="html">&lt;p&gt;The &lt;a href='https://artsy.net'&gt;Artsy&lt;/a&gt; Platform Engineering team has established a &amp;#8220;Future Fridays&amp;#8221; tradition.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The rules are simple. Each Friday, we give ourselves permission to suspend our usual work. Instead, we zoom out and try to answer:&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    <content type="html">&lt;p&gt;The &lt;a href='https://artsy.net'&gt;Artsy&lt;/a&gt; Platform Engineering team has established a &amp;#8220;Future Fridays&amp;#8221; tradition.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The rules are simple. Each Friday, we give ourselves permission to suspend our usual work. Instead, we zoom out and try to answer:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What are the patterns emerging in our work&amp;#8211;repeated smells or obstacles&amp;#8211;that could be addressed at the root?&lt;/li&gt;

&lt;li&gt;What new technologies might we want to have in place 6, 12, or 18 months from now?&lt;/li&gt;

&lt;li&gt;What will we need to get to 10x the scale of data, traffic, or revenue?&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Read more on the Artsy Engineering blog: &lt;a href='http://artsy.github.io/blog/2015/12/22/future-fridays/'&gt;Future Fridays&lt;/a&gt;.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Kitchen renovation 2015</title>
    <link rel="alternate" href="/kitchen-renovation-2015/"/>
    <id>/kitchen-renovation-2015/</id>
    <published>2015-05-27T13:23:00Z</published>
    <updated>2015-05-27T13:23:00Z</updated>
    <author>
      <name>Joey Aghion</name>
    </author>
    <summary type="html">&lt;h2 id='20141216_existing_kitchen'&gt;2014-12-16: existing kitchen&lt;/h2&gt;
&lt;img alt='kitchen from dining room' src='/images/2015-05-27-kitchen-renovation-2015/2014-12-16_kitchen1.jpg' /&gt;&lt;img alt='kitchen south and east sides' src='/images/2015-05-27-kitchen-renovation-2015/2014-12-16_kitchen2.jpg' /&gt;</summary>
    <content type="html">&lt;h2 id='20141216_existing_kitchen'&gt;2014-12-16: existing kitchen&lt;/h2&gt;
&lt;img alt='kitchen from dining room' src='/images/2015-05-27-kitchen-renovation-2015/2014-12-16_kitchen1.jpg' /&gt;&lt;img alt='kitchen south and east sides' src='/images/2015-05-27-kitchen-renovation-2015/2014-12-16_kitchen2.jpg' /&gt;&lt;img alt='kitchen south, east, and north sides' src='/images/2015-05-27-kitchen-renovation-2015/2014-12-16_kitchen3.jpg' /&gt;
&lt;h2 id='20150101_deleading_demolition_sheetrock'&gt;2015-01-01: deleading, demolition, sheetrock&lt;/h2&gt;
&lt;img alt='demolition and deleading' src='/images/2015-05-27-kitchen-renovation-2015/2015-01-01_construction1.jpg' /&gt;&lt;img alt='demolition and deleading' src='/images/2015-05-27-kitchen-renovation-2015/2015-01-01_construction2.jpg' /&gt;&lt;img alt='new sheetrock' src='/images/2015-05-27-kitchen-renovation-2015/2015-01-01_construction1.jpg' /&gt;
&lt;h2 id='20150322__20150426_cabinets'&gt;2015-03-22 - 2015-04-26: cabinets&lt;/h2&gt;
&lt;img src='/images/2015-05-27-kitchen-renovation-2015/2015-03-22_cabinets1.jpg' /&gt;&lt;img src='/images/2015-05-27-kitchen-renovation-2015/2015-03-22_cabinets2.jpg' /&gt;&lt;img src='/images/2015-05-27-kitchen-renovation-2015/2015-03-22_cabinets3.jpg' /&gt;&lt;img src='/images/2015-05-27-kitchen-renovation-2015/2015-03-22_cabinets4.jpg' /&gt;&lt;img src='/images/2015-05-27-kitchen-renovation-2015/2015-03-22_cabinets5.jpg' /&gt;&lt;img src='/images/2015-05-27-kitchen-renovation-2015/2015-03-22_cabinets6.jpg' /&gt;&lt;img src='/images/2015-05-27-kitchen-renovation-2015/2015-03-22_cabinets7.jpg' /&gt;&lt;img src='/images/2015-05-27-kitchen-renovation-2015/2015-03-22_cabinets8.jpg' /&gt;&lt;img src='/images/2015-05-27-kitchen-renovation-2015/2015-03-22_cabinets9.jpg' /&gt;
&lt;h2 id='20150429_countertop'&gt;2015-04-29: countertop&lt;/h2&gt;
&lt;img src='/images/2015-05-27-kitchen-renovation-2015/2015-04-29_countertop1.jpg' /&gt;&lt;img src='/images/2015-05-27-kitchen-renovation-2015/2015-04-29_countertop2.jpg' /&gt;&lt;img src='/images/2015-05-27-kitchen-renovation-2015/2015-04-29_countertop3.jpg' /&gt;
&lt;h2 id='20150517_finished'&gt;2015-05-17: finished&lt;/h2&gt;
&lt;img src='/images/2015-05-27-kitchen-renovation-2015/2015-05-17_finished2.jpg' /&gt;&lt;img src='/images/2015-05-27-kitchen-renovation-2015/2015-05-17_finished1.jpg' /&gt;</content>
  </entry>
  <entry>
    <title>Track out-of-date releases with Releasecop</title>
    <link rel="alternate" href="/track-out-of-date-releases-with-releasecop/"/>
    <id>/track-out-of-date-releases-with-releasecop/</id>
    <published>2015-03-30T14:01:00Z</published>
    <updated>2015-03-30T14:01:00Z</updated>
    <author>
      <name>Joey Aghion</name>
    </author>
    <summary type="html">&lt;p&gt;Artsy practices a sort of &lt;a href='http://en.wikipedia.org/wiki/Continuous_delivery'&gt;continuous delivery&lt;/a&gt;: builds are automated, and there is always a deployable version of the codebase. Thus commits form a pipeline:&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Artsy practices a sort of &lt;a href='http://en.wikipedia.org/wiki/Continuous_delivery'&gt;continuous delivery&lt;/a&gt;: builds are automated, and there is always a deployable version of the codebase. Thus commits form a pipeline:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;From developers&amp;#8217; working branches&lt;/li&gt;

&lt;li&gt;To the master branch&lt;/li&gt;

&lt;li&gt;Through a [hopefully successful] build&lt;/li&gt;

&lt;li&gt;Often to a staging environment&lt;/li&gt;

&lt;li&gt;Upon deploy, to the production environment&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We have a number of tools to help us shepherd commits through this pipeline, but now that the number of apps and services we deploy has grown, sometimes things fall through the cracks. I just released a quick-and-dirty tool to help track how out-of-date different environments are: &lt;a href='https://github.com/joeyAghion/releasecop'&gt;&lt;strong&gt;Releasecop&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Just list the different environments for each project (by git repo or branch name) in a &lt;em&gt;manifest&lt;/em&gt; file, and the &lt;code&gt;releasecop check&lt;/code&gt; command reports which commits have yet to be deployed to each environment. We set up a nightly Jenkins task to email us the results.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Instance variables, class variables, and class instance variables in Ruby</title>
    <link rel="alternate" href="/instance-variables-class-variables-and-class-instance-variables-in-ruby/"/>
    <id>/instance-variables-class-variables-and-class-instance-variables-in-ruby/</id>
    <published>2015-02-25T13:16:00Z</published>
    <updated>2015-02-25T13:16:00Z</updated>
    <author>
      <name>Joey Aghion</name>
    </author>
    <summary type="html">&lt;p&gt;Trying to understand how instance variables, class variables, and &lt;em&gt;class&lt;/em&gt; instance variables interacted in Ruby, I wrote this quick demo:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Foo
  def get_instance_v
    @v ||= &amp;#39;@v&amp;#39;.tap { puts &amp;#39;Setting @v from instance method!&amp;#39; }&lt;/code&gt;&lt;/pre&gt;</summary>
    <content type="html">&lt;p&gt;Trying to understand how instance variables, class variables, and &lt;em&gt;class&lt;/em&gt; instance variables interacted in Ruby, I wrote this quick demo:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Foo
  def get_instance_v
    @v ||= &amp;#39;@v&amp;#39;.tap { puts &amp;#39;Setting @v from instance method!&amp;#39; }
  end

  def get_class_v
    @@v ||= &amp;#39;@@v&amp;#39;.tap { puts &amp;#39;Setting @@v from instance method!&amp;#39; }
  end

  def self.get_instance_v
    @v ||= &amp;#39;class @v&amp;#39;.tap { puts &amp;#39;Setting @v from class method!&amp;#39; }
  end

  def self.get_class_v
    @@v ||= &amp;#39;class @@v&amp;#39;.tap { puts &amp;#39;Setting @@v from class method!&amp;#39; }
  end
end&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Try to guess what will happen&amp;#8230;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; foo = Foo.new
&amp;gt; foo.get_instance_v
Setting @v from instance method!
=&amp;gt; &amp;quot;@v&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;#8217;s pretty predictable. Let&amp;#8217;s set the class variable &lt;code&gt;@@v&lt;/code&gt; from an instance method:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; foo.get_class_v
Setting @@v from instance method!
=&amp;gt; &amp;quot;@@v&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All good. Now, let&amp;#8217;s set an instance variable &lt;code&gt;@v&lt;/code&gt; from within a class method (usually called a &lt;em&gt;class instance variable&lt;/em&gt;).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; foo.class.get_instance_v
Setting @v from class method!
=&amp;gt; &amp;quot;class @v&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Equivalently, we could have called &lt;code&gt;Foo.get_instance_v&lt;/code&gt;. Now, let&amp;#8217;s again refer to the class variable &lt;code&gt;@@v&lt;/code&gt;, but from a class method:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; foo.class.get_class_v
=&amp;gt; &amp;quot;@@v&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(It was already set by the instance method.) The &lt;code&gt;@@v&lt;/code&gt; reference resolves to the same variable from an instance context &lt;em&gt;or&lt;/em&gt; a class context.&lt;/p&gt;

&lt;p&gt;Now we&amp;#8217;ll extend the &lt;code&gt;Foo&lt;/code&gt; class and see how these variables work with inheritance.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Bar &amp;lt; Foo
  def get_instance_v
    @v ||= &amp;#39;@v in Bar&amp;#39;.tap { puts &amp;#39;Setting @v from Bar instance method!&amp;#39; }
  end

  def get_class_v
    @@v ||= &amp;#39;@@v in Bar&amp;#39;.tap { puts &amp;#39;Setting @@v from Bar instance method!&amp;#39; }
  end

  def self.get_instance_v
    @v ||= &amp;#39;class @v in Bar&amp;#39;.tap { puts &amp;#39;Setting @v from Bar class method!&amp;#39; }
  end

  def self.get_class_v
    @@v ||= &amp;#39;class @@v in Bar&amp;#39;.tap { puts &amp;#39;Setting @@v from Bar class method!&amp;#39; }
  end
end&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As expected, instance variables are scoped to our instance:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; bar = Bar.new
&amp;gt; bar.get_instance_v
Setting @v from Bar instance method!
=&amp;gt; &amp;quot;@v in Bar&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What about class variables?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; bar.get_class_v
=&amp;gt; &amp;quot;@@v&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Apparently, class variable references in the child class refer to the base class. But is that always the case? We&amp;#8217;ll reopen both classes to see what happens if the class variable is first set in the child class:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Foo
  def get_class_x
    @@x ||= &amp;quot;Foo&amp;#39;s @@x&amp;quot;.tap { puts &amp;#39;Setting @@x in Foo&amp;#39; }
  end
end

class Bar &amp;lt; Foo
  def get_class_x
    @@x ||= &amp;quot;Bar&amp;#39;s @@x&amp;quot;.tap { puts &amp;#39;Setting @@x in Bar&amp;#39; }
  end
end

&amp;gt; bar.get_class_x
Setting @@x in Bar
=&amp;gt; &amp;quot;Bar&amp;#39;s @@x&amp;quot;
&amp;gt; foo.get_class_x
Setting @@x in Foo
=&amp;gt; &amp;quot;Foo&amp;#39;s @@x&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That was a surprise. The class variable isn&amp;#8217;t exactly &lt;em&gt;shared&lt;/em&gt; between the parent and child classes. The child class looks up the class variable in the base class, but sets it on itself. The base class keeps its own copy.&lt;/p&gt;

&lt;p&gt;Something strange happens if the child class again references the class variable:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; bar.get_class_x
&amp;quot;Foo&amp;#39;s @@x&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Huh? Apparently the child class &lt;em&gt;prefers&lt;/em&gt; the class variable set on its base class to its own.&lt;/p&gt;

&lt;p&gt;There are further wrinkles when these class variables &lt;span&gt;and class instance variables&lt;/span&gt; are used from modules, but that&amp;#8217;s a topic for another post.&lt;/p&gt;</content>
  </entry>
</feed>
